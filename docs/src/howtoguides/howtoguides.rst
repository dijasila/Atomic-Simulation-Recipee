.. _How to guides:

=============
How-to guides
=============

.. testsetup::

  >>> from click.testing import CliRunner
  >>> from asr.core.cli import cli
  >>> runner = CliRunner()

The tools of ASR can be combined to perform complicated tasks with little
effort. Below you will find the recommended procedures to perform common
tasks within the ASR framework.

.. contents:: List of available how-to guides


How-to: Collect a tree to folders and open in browser
-----------------------------------------------------
Suppose you have a set of folders with a structure like::

  tree/A/Mn/
  tree/AB/MnI2/
  tree/*/*/
  etc.

Then collect the database with

.. doctest::
  :hide:

  >>> result = runner.invoke(cli, ["database", "fromtree", "tree/*/*/", "--help"])
  >>> assert result.exit_code == 0
  >>> result = runner.invoke(cli, ["database", "app", "--help"])
  >>> assert result.exit_code == 0

.. code-block:: console

  $ asr database fromtree tree/*/*/

And open a local web server with

.. code-block:: console

  $ asr database app database.db

Now browse it with

.. code-block:: console

  $ firefox localhost:5000


How-to: Submit a recipe with `MyQueue`
--------------------------------------

It is also recommended to use these recipes together with the `myqueue` job
managing package. We assume that you have installed the `myqueue`-package and
are familiar with its usage. To submit a job that relaxes a structure simply
do

.. code-block:: console

  $ mq submit asr.relax -R 24:10h

You can also specify arguments with

.. code-block:: console

  $ mq submit "asr.relax --allow-symmetry-breaking" -R 24:10h


How-to: Generate figures from a certain recipe
----------------------------------------------

Let's assume that the bandstructure has been calculated and you want
to display the results. Then it's as simple as using the `asr results`
cli sub-command

.. doctest::
  :hide:

  >>> result = runner.invoke(cli, ["results", "--help"])
  >>> assert result.exit_code == 0

.. code-block:: console

  $ asr results asr.bandstructure

which will save any figures generated by the webpanel associated with
`asr.bandstructure` in the current folder.


How-to: Save and instantiate result objects
-------------------------------------------

Here we are creating results object, converting it to a ``dict`` and
converting it back to a result object

.. doctest::

   >>> import numpy as np
   >>> from asr.core import decode_object
   >>> from asr.c2db.piezoelectrictensor import Result
   >>> result = Result.fromdata(eps_vvv=np.ones((3, 3, 3), float), eps_clamped_vvv=np.ones((3, 3, 3), float))
   >>> dct = result.format_as('dict')
   >>> result = decode_object(dct)


How-to: Select rows in database with results from specific recipe
-----------------------------------------------------------------

When a database has been collected with ``asr.database.fromtree`` it
automatically saves a special key-value-pair named as
``has_asr_recipename``. Concretely if ``asr.c2db.gs:calculate`` is
calculated for the specific row then it will have the
``has_asr_c2db_gs_calculate`` key-value-pair defined. To select all rows
where ``asr.c2db.gs@calculate`` is done then simply do

.. code-block:: console

   $ ase db database.db has_asr_c2db_gs_calculate


to select those rows.


How-to: Retrive records from database
-------------------------------------

Suppose you have a database ``database.db`` from which
you want to extract the records from all rows where a
bandstructure calculation has been performed. This can
be achieved by

.. literalinclude:: retrieve_results_from_database.py